
@use "sass:list";
@use "sass:math";
@use "sass:map";
@use "sass:string";


// ===== Visibility ==============================================


// ++++++++++ Visually Hidden

// Visually hide an element so that it can still be accessed by a screen reader.

@mixin visually-hidden() {
  border: 0;
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}


// ===== Pseudo ==============================================


// +++++++++++ Fake A Full Width Background Colour

// Sets a background with a specified colour as a pseudo element
// that fills the full width of the viewport.
// Useful for elements that exist within a layout container that restricts the width.
// NOTE: The elements ancestors must not hide the overflow with `overflow: hidden;`.

@mixin fake-full-width($fake-bg: #666) {
  position: relative;
  z-index: 1;

  &::before {
    background: $fake-bg;
    background-size: cover;
    bottom: 0;
    content: '';
    left: 50%;
    margin-left: -50vw;
    position: absolute;
    right: 0;
    top: 0;
    width: 100vw;
    z-index: -1;
  }
}


// ++++++++++ Full width ratio setter

// LIMITATION: only for use in an element that is 100% of the width of the viewport

// Use this on a pseudo element that is within a flex layout to set a minumum height
// that is a percentage of the width to emulate an image ratio

// The main reason for this approach rather than applying a min height
// to the element directly is to allow for a maximum height on larger screens

@mixin full-width-ratio-setter($width: 16, $height: 9) {
  $ratio-percentage: $height / $width;
  content: '';
  display: block;
  flex: 0 0 0;
  height: calc(100vw * #{$ratio-percentage});
  width: 0;
}


// +++++++++ Pseudo Border

// Adds a border to any side of an element using a pseudo element.
// Useful for adding borders to elements that have padding like Bootstrap grid items.
// Only supports top and bottom sides.

@mixin pseudo-border($side, $position, $color, $width, $padding-size: 0) {
  @if $position == "before" {
    &::before {
      content: "";
      display: block;
      width: 100%;
      border-color: $color;
      border-style: solid;
      transform: translateY(- $padding-size);

      @if $side == "top" {
        border-width: $width 0 0 0;
        top: 0;
      } @else if $side == "bottom" {
        border-width: 0 0 $width;
        bottom: 0;
      }
    }
  } @else if $position == "after" {
    &::after {
      content: "";
      display: block;
      width: 100%;
      border-color: $color;
      border-style: solid;
      transform: translateY($padding-size);

      @if $side == "top" {
        border-width: $width 0 0 0;
        bottom: 0;
      } @else if $side == "bottom" {
        border-width: 0 0 $width;
        top: 0;
      }
    }
  }
}


// ++++++++++ Text Truncate

// Requires the element to be block or inline-block.
// Only works for 1 line elements.

@mixin text-truncate {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}


// ++++++++++ Icon Mixin

// Icomoon icon variables can be found at (src/fonts/icomoon-v1.0/variables.scss)

@mixin icon-base {
  display: inline-block;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  vertical-align: -0.125em;
}

@mixin icon($icon: $icon-arrow-right, $type: solid, $file-name: null, $width: null, $height: null) {

  @if $file-name == null or ($use-icon-font == true and $icon != background) {
    @include icon-base();
    content: $icon;
    font-family: '#{$icomoon-font-family}';
  }

  @else {
    background-image: url('#{$icon-path}/#{$file-name}');
    background-position: center;
    background-repeat: no-repeat;
    background-size: 100% auto;
    content: '';

    @if $width != null {
      width: $width;
    }

    @if $height != null {
      height: $height;
    }
  }
}


// ++++++++++ Background Icon

@mixin icon-bg($file-name, $width: null, $height: null) {
  background-image: url('#{$icon-path}/#{$file-name}');
  background-position: center;
  background-repeat: no-repeat;
  background-size: 100% auto;
  content: '';

  @if $width != null {
    width: $width;
  }

  @if $height != null {
    height: $height;
  }
}


// ===== Resets ==============================================


// ++++++++++ Reset List Formatting

@mixin reset--list() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin reset--list-item() {
  margin: 0;
  padding: 0;
}


// ++++++++++ Reset Visually Hidden

@mixin reset--visually-hidden() {
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}


// ===== Shapes ==============================================


// ++++++++++ Triangle helper mixin

// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
// @param {Color} $color [currentcolor] - Triangle color
// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {

  $perpendicular-borders: $size solid transparent;
  content: '';
  height: 0;
  width: 0;
  @if not list.index(top right bottom left, $direction) {
    @error 'Direction must be either `top`, `right`, `bottom` or `left`.';
  }
  border-#{opposite-direction($direction)}: ($size * 1) solid $color;

  @if $direction == top or $direction == bottom {
    border-left: $perpendicular-borders;
    border-right: $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top: $perpendicular-borders;
  }
}


// ++++++++++ Arrow helper mixin

// Calculate the height of an equilateral triangle
// Multiplying half the length of the base of an equilateral triangle by the
// square root of three gives us its height. We use 1.732 as an approximation.

// @param {Number} $base - Length of the base of the triangle
// @return {Number} Calculated height of the triangle

@function _nc-equilateral-height($base) {
  $square-root-of-three: 1.732;

  @return (math.div($base, 2)) * $square-root-of-three;
}

// Generate Arrows (triangles) by using a mix of transparent (1) and coloured
// borders. The coloured borders inherit the text colour of the element (2).

// Ensure the arrow is rendered correctly if browser colours are overridden by
// providing a clip path (3). Without this the transparent borders are
// overridden to become visible which results in a square.

// We need both because older browsers do not support clip-path.

// @param {String} $direction - Direction for arrow: up, right, down, left.
// @param {Number} $base - Length of the triangle 'base' side
// @param {Number} $height [null] - Height of triangle. Omit for equilateral.
// @param {String} $display [block] - CSS display property of the arrow

@mixin nc-shape-arrow($direction, $base, $height: null, $display: block) {
  display: $display;

  width: 0;
  height: 0;

  border-style: solid;
  border-color: transparent;

  $perpendicular: math.div($base, 2);

  @if not $height {
    $height: _nc-equilateral-height($base);
  }

  @if $direction == "up" {
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);

    border-width: 0 $perpendicular $height;
    border-bottom-color: currentColor;
  } @else if $direction == "right" {
    clip-path: polygon(0% 0%, 100% 50%, 0% 100%);

    border-width: $perpendicular 0 $perpendicular $height;
    border-left-color: currentColor;
  } @else if $direction == "down" {
    clip-path: polygon(0% 0%, 50% 100%, 100% 0%);

    border-width: $height $perpendicular 0 $perpendicular;
    border-top-color: currentColor;
  } @else if $direction == "left" {
    clip-path: polygon(0% 50%, 100% 100%, 100% 0%);

    border-width: $perpendicular $height $perpendicular 0;
    border-right-color: currentColor;
  } @else {
    @error "Invalid arrow direction: expected `up`, `right`, `down` or `left`, got `#{$direction}`";
  }
}


// ===== States ==============================================


// ++++++++++ Focus Style

@mixin focus-ring() {
  outline: 0;
  box-shadow: var(--bs-focus-ring-x,0) var(--bs-focus-ring-y,0) var(--bs-focus-ring-blur,0) var(--bs-focus-ring-width) var(--bs-focus-ring-color);
}
